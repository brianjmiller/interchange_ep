.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Vend::Payment::CyberCash 3"
.TH Vend::Payment::CyberCash 3 "2008-11-12" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Vend::Payment::CyberCash \- Interchange CyberCash Support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    &charge=cybercash
.Ve
.PP
.Vb 1
\&        or
.Ve
.PP
.Vb 1
\&    [charge mode=cybercash param1=value1 param2=value2]
.Ve
.PP
.Vb 1
\&        or
.Ve
.PP
.Vb 1
\&    $Tag->charge('cybercash', $opt);
.Ve
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
CyberCash connection kit V3.2.0.4
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Vend::Payment::CyberCash module implements the \fIcybercash()\fR routine
for use with Interchange. It is compatible on a call level with the other
Interchange payment modules \*(-- in theory (and even usually in practice) you
could switch from Authorize.net to CyberCash with a few configuration 
file changes.
.PP
To enable this module, place this directive in \f(CW\*(C`interchange.cfg\*(C'\fR:
.PP
.Vb 1
\&    Require module Vend::Payment::CyberCash
.Ve
.PP
This \fIshould\fR be in interchange.cfg or a file included from it, but
it is actually in by default to maintain backward compatibility with
legacy CyberCash installations.
.PP
Make sure CreditCardAuto is off (default in Interchange demos).
.PP
Make sure the CyberCash Merchant connection kit is installed and working.
It requires the following steps:
.IP "1." 4
Obtain the CyberCash modules, prefereably version 3.2.0.4 though
3.2.0.5 and above should work if you add \*(L"DebugFile /dev/null\*(R" in
interchange.cfg. Ask around on the list if you need older versions.
.IP "2." 4
Install the modules, then find the directory where they are and
copy them to /path_to_interchange/lib. Include the following files:
.Sp
.Vb 2
\&    CCMckDirectLib3_2.pm  CCMckLib3_2.pm  MCKencrypt
\&    CCMckErrno3_2.pm      MCKdecrypt      computeMD5hash
.Ve
.Sp
Make sure the program files (non\-.pm) are executable.
.IP "3." 4
Edit CC*.pm to adjust the paths for MCKencrypt, MCKdecrypt, and
computeMD5hash.
.Sp
.Vb 3
\&  in CCMckDirectLib3_2.pm:
\&    $MCKencrypt = "/path_to_interchange/lib/MCKencrypt";
\&    $MCKdecrypt = "/path_to_interchange/lib/MCKdecrypt";
.Ve
.Sp
.Vb 2
\&  in CCMckLib3_2.pm:
\&    $computehash = "/path_to_interchange/lib/computeMD5hash";
.Ve
.IP "4." 4
Restart Interchange and make sure you get the message:
.Sp
.Vb 1
\&    CyberCash module found (Version 3.x)
.Ve
.PP
The mode can be named anything, but the \f(CW\*(C`gateway\*(C'\fR parameter must be set
to \f(CW\*(C`cybercash\*(C'\fR. To make it the default payment gateway for all credit
card transactions in a specific catalog, you can set in \f(CW\*(C`catalog.cfg\*(C'\fR:
.PP
.Vb 1
\&    Variable   MV_PAYMENT_MODE  cybercash
.Ve
.PP
It uses any of the applicable standard settings from Interchange payment. Any time
we speak of a setting, it is obtained either first from the tag/call options,
then from an Interchange order Route named for the mode, then finally a
default global payment variable, For example, the \f(CW\*(C`configfile\*(C'\fR parameter would
be specified by:
.PP
.Vb 1
\&    [charge mode=cybercash configfile="/path/to/the/merchant_conf"]
.Ve
.PP
or
.PP
.Vb 1
\&    Route cybercash configfile /path/to/the/merchant_conf
.Ve
.PP
or 
.PP
.Vb 1
\&    Variable MV_PAYMENT_CONFIGFILE    /path/to/the/merchant_conf
.Ve
.PP
The active settings are:
.IP "configfile" 4
.IX Item "configfile"
Your CyberCash merchant_conf file, usually created when you installed the \s-1MCK\s0.
Global parameter is \s-1MV_PAYMENT_CONFIGFILE\s0.
.IP "precision" 4
.IX Item "precision"
The number of decimal digits to be included in the amount. Default is 2.
.IP "currency" 4
.IX Item "currency"
The international currency code to use. Default is \f(CW\*(C`usd\*(C'\fR. Must be supported
by CyberCash.
.PP
Items supported, but never normally used, are:
.IP "host" 4
.IX Item "host"
The CyberCash host to use. Default is set in the merchant_conf file, and is
not normally changed by the user. No global parameter is used for fear of
conflict with another payment gateway \*(-- must be set in the Route or
direct option.
.IP "transaction" 4
.IX Item "transaction"
The type of transaction to be run. Valid values are:
.Sp
.Vb 4
\&    Interchange mode    CyberCash mode
\&    ----------------    -----------------
\&    sale                mauthcapture
\&    auth                mauthonly
.Ve
.Sp
\&\s-1IMPORTANT\s0 \s-1NOTE:\s0 In most cases, you cannot control your transaction type,
it is set at http://amps.cybercash.com.
.IP "remap" 4
.IX Item "remap"
This remaps the form variable names to the ones needed by CyberCash. See
the payment documentation for details.
.Sh "Troubleshooting"
.IX Subsection "Troubleshooting"
Try the instructions above, then enable test mode at http://amps.cybercash.com.
A test order should complete. Exam
.PP
Then try a sale with the card number \f(CW\*(C`4111 1111 1111 1111\*(C'\fR
and a valid expiration date. The sale should be denied, and the reason should
be in [data session payment_error].
.PP
If nothing works:
.IP "\(bu" 4
Make sure you \*(L"Require\*(R"d the module in interchange.cfg:
.Sp
.Vb 1
\&    Require module Vend::Payment::CyberCash
.Ve
.IP "\(bu" 4
Make sure the CyberCash Merchant connection kit is installed and working. Test
with CyberCash's supplied routines.
.IP "\(bu" 4
Check the error logs, both catalog and global.
.IP "\(bu" 4
Make sure you set your payment parameters properly. At the minimum, you
will need:
.Sp
.Vb 1
\&    Route  cybercash   configfile   /path/to/merchant_conf
.Ve
.IP "\(bu" 4
Make sure you have a payment mode set if you are not calling it with
\&\f(CW\*(C`&charge=cybercash\*(C'\fR:
.Sp
.Vb 1
\&    Variable  MV_PAYMENT_MODE  cybercash
.Ve
.Sp
Everything is case\-sensitive, make sure values match.
.IP "\(bu" 4
Try an order, then put this code in a page:
.Sp
.Vb 8
\&    <XMP>
\&    [calc]
\&        my $string = $Tag->uneval( { ref => $Session->{payment_result} });
\&        $string =~ s/{/{\en/;
\&        $string =~ s/,/,\en/g;
\&        return $string;
\&    [/calc]
\&    </XMP>
.Ve
.Sp
That should show what happened.
.SH "BUGS"
.IX Header "BUGS"
There is actually nothing *in* Vend::Payment::CyberCash. It changes packages
to Vend::Payment and places things there.
.SH "AUTHORS"
.IX Header "AUTHORS"
Mike Heins
.SH "CREDITS"
.IX Header "CREDITS"
.Vb 5
\&    Jeff Nappi <brage@cyberhighway.net>
\&    Paul Delys <paul@gi.alaska.edu>
\&    webmaster@nameastar.net
\&    Ray Desjardins <ray@dfwmicrotech.com>
\&    Nelson H. Ferrari <nferrari@ccsc.com>
.Ve
