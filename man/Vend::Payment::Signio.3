.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Vend::Payment::Signio 3"
.TH Vend::Payment::Signio 3 "2008-11-12" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Vend::Payment::Signio \- Interchange support for Signio/Verisign Payflow Pro
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    &charge=signio
.Ve
.PP
.Vb 1
\&        or
.Ve
.PP
.Vb 1
\&    [charge mode=signio param1=value1 param2=value2]
.Ve
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
Verisign/Signio Payflow Pro, Version 2.10 or higher
.SH "VERISIGN SOFTWARE SETUP"
.IX Header "VERISIGN SOFTWARE SETUP"
Verisign's interface requires a proprietary binary-only shared library;
thus you must download the appropriate package for your platform from Verisign.
On Linux, the archive you download is \fIpfpro_linux.tar.gz\fR. It includes
documentation you should consult. Here's a brief installation guide for
someone using Linux with root access:
.IP "\(bu" 4
Copy the \fIpayflowpro/linux/certs\fR directory to \s-1VENDROOT\s0,
your Interchange root directory (perhaps /usr/lib/interchange or
/usr/local/interchange). This contains a single file with the client
\&\s-1SSL\s0 certificate required to authenticate with Verisign's https server.
.IP "\(bu" 4
Install \fIpayflowpro/linux/lib/libpfpro.so\fR somewhere on your system
fit for shared libraries, such as /usr/lib, or else in VENDROOT/lib.
.IP "\(bu" 4
Build the \fIPFProAPI.pm\fR Perl module:
.RS 4
.IP "\(bu" 4
cd payflowpro/linux/perl
.IP "\(bu" 4
If you installed libpfpro.so somewhere other than in a standard location
for shared libraries on your system, edit line 6 of Makefile.PL, so that
\&\*(L"\-L.\*(R" instead reads \*(L"\-L/path/to/libpfpro.so\*(R" with the correct path.
.IP "\(bu" 4
perl Makefile.PL && make && make test
.IP "\(bu" 4
As root, make install
.RE
.RS 4
.RE
.PP
Using PFProAPI.pm is the best way to interact with Payflow Pro. However,
if you can't get it to work for whatever reason, you may also use either
of two small wrapper binaries, pfpro and pfpro\-file, designed to be
called from the shell. Interchange must fork and execute the binary, then
retrieve the Verisign response from a temporary file. This module will
automatically fall back to using one of them if it can't find PFProAPI.pm
when Interchange is started.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Vend::Payment::Signio module implements the \fIsignio()\fR payment routine
for use with Interchange. It is compatible on a call level with the other
Interchange payment modules \*(-- in theory (and even usually in practice) you
could switch from CyberCash to Signio with a few configuration 
file changes.
.PP
To enable this module, place this directive in \fIinterchange.cfg\fR:
.PP
.Vb 1
\&    Require module Vend::Payment::Signio
.Ve
.PP
This \fImust\fR be in interchange.cfg or a file included from it.
.PP
\&\s-1NOTE:\s0 Make sure CreditCardAuto is off (default in Interchange demos).
.PP
The mode can be named anything, but the \f(CW\*(C`gateway\*(C'\fR parameter must be set
to \f(CW\*(C`signio\*(C'\fR. To make it the default payment gateway for all credit
card transactions in a specific catalog, you can set in \fIcatalog.cfg\fR:
.PP
.Vb 1
\&    Variable   MV_PAYMENT_MODE  signio
.Ve
.PP
It uses several of the standard settings from Interchange payment. Any time
we speak of a setting, it is obtained either first from the tag/call options,
then from an Interchange order Route named for the mode, then finally a
default global payment variable. For example, the \f(CW\*(C`id\*(C'\fR parameter would
be specified by:
.PP
.Vb 1
\&    [charge mode=signio id=YourPayflowProID]
.Ve
.PP
or
.PP
.Vb 1
\&    Route signio id YourPayflowProID
.Ve
.PP
or with only PayflowPro as a payment provider
.PP
.Vb 1
\&    Variable MV_PAYMENT_ID      YourPayflowProID
.Ve
.PP
The active settings are:
.IP "id" 4
.IX Item "id"
Your account \s-1ID\s0, supplied by VeriSign when you sign up.
Global parameter is \s-1MV_PAYMENT_ID\s0.
.IP "secret" 4
.IX Item "secret"
Your account password, selected by you or provided by Verisign when you sign up.
Global parameter is \s-1MV_PAYMENT_SECRET\s0.
.IP "partner" 4
.IX Item "partner"
Your account partner, selected by you or provided by Verisign when you
sign up. Global parameter is \s-1MV_PAYMENT_PARTNER\s0.
.IP "vendor" 4
.IX Item "vendor"
Your account vendor, selected by you or provided by Verisign when you
sign up. Global parameter is \s-1MV_PAYMENT_VENDOR\s0.
.IP "transaction" 4
.IX Item "transaction"
The type of transaction to be run. Valid values are:
.Sp
.Vb 7
\&    Interchange         Payflow Pro
\&    ----------------    -----------------
\&        sale                S
\&        auth                A
\&        credit              C
\&        void                V
\&        settle              D (from previous A trans)
.Ve
.Sp
Default is \f(CW\*(C`sale\*(C'\fR.
.PP
The following should rarely be used, as the supplied defaults are 
usually correct.
.IP "remap" 4
.IX Item "remap"
This remaps the form variable names to the ones needed by Verisign. See
the \f(CW\*(C`Payment Settings\*(C'\fR heading in the Interchange documentation for use.
.IP "host" 4
.IX Item "host"
The payment gateway host to use. Default is \f(CW\*(C`payflow.verisign.com\*(C'\fR, and
\&\f(CW\*(C`test\-payflow.verisign.com\*(C'\fR when in test mode.
.IP "check_sub" 4
.IX Item "check_sub"
Name of a Sub or GlobalSub to be called after the result hash has been
received from Verisign. A reference to the modifiable result hash is
passed into the subroutine, and it should return true (in the Perl truth
sense) if its checks were successful, or false if not.
.Sp
This can come in handy since, strangely, Verisign has no option to decline
a charge when \s-1AVS\s0 or \s-1CSC\s0 data come back negative. See Verisign knowledge
base articles vs2365, vs7779, vs12717, and vs22810 for more details.
.Sp
If you want to fail based on a bad \s-1AVS\s0 check, make sure you're only
doing an auth \*(-- \fBnot a sale\fR, or your customers would get charged on
orders that fail the \s-1AVS\s0 check and never get logged in your system!
.Sp
Add the parameters like this:
.Sp
.Vb 1
\&        Route  signio  check_sub  avs_check
.Ve
.Sp
This is a matching sample subroutine you could put in interchange.cfg:
.Sp
.Vb 12
\&        GlobalSub <<EOR
\&        sub avs_check {
\&                my ($result) = @_;
\&                my ($addr, $zip) = @{$result}{qw( AVSADDR AVSZIP )};
\&                return 1 if $addr eq 'Y' or $zip eq 'Y';
\&                return 1 if $addr eq 'X' and $zip eq 'X';
\&                return 1 if $addr !~ /\eS/ and $zip !~ /\eS/;
\&                $result->{RESULT} = 112;
\&                $result->{RESPMSG} = "The billing address you entered does not match the cardholder's billing address";
\&                return 0;
\&        }
\&        EOR
.Ve
.Sp
That would work equally well as a Sub in catalog.cfg. It will succeed if
either the address or zip is 'Y', or if both are unknown. If it fails,
it sets the result code and error message in the result hash using
Verisign's own (otherwise unused) 112 result code, meaning \*(L"Failed \s-1AVS\s0
check\*(R".
.Sp
Of course you can use this sub to do any other post-processing you
want as well.
.Sh "Troubleshooting"
.IX Subsection "Troubleshooting"
Try the instructions above, then enable test mode. A test order should complete.
.PP
Then move to live mode and try a sale with the card number \f(CW\*(C`4111 1111
1111 1111\*(C'\fR and a valid future expiration date. The sale should be denied,
and the reason should be in [data session payment_error].
.PP
If it doesn't work:
.IP "\(bu" 4
Make sure you \*(L"Require\*(R"d the module in interchange.cfg:
.Sp
.Vb 1
\&    Require module Vend::Payment::Signio
.Ve
.IP "\(bu" 4
Make sure the Verisign \f(CW\*(C`libpfpro.so\*(C'\fR shared library was available to
PFProAPI.xs when you built and installed the PFProAPI.pm module, and that
you haven't moved \f(CW\*(C`libpfpro.so\*(C'\fR since then.
.Sp
If you're not using the PFProAPI Perl interface, make sure the Verisign
\&\f(CW\*(C`pfpro\*(C'\fR or \f(CW\*(C`pfpro\-file\*(C'\fR executable is available either in your path or
in /path_to_interchange/lib.
.IP "\(bu" 4
Check the error logs, both catalog and global.
.IP "\(bu" 4
Make sure you set your account \s-1ID\s0 and secret properly.  
.IP "\(bu" 4
Try an order, then put this code in a page:
.Sp
.Vb 8
\&    <XMP>
\&    [calc]
\&        my $string = $Tag->uneval( { ref => $Session->{payment_result} });
\&        $string =~ s/{/{\en/;
\&        $string =~ s/,/,\en/g;
\&        return $string;
\&    [/calc]
\&    </XMP>
.Ve
.Sp
That should show what happened.
.IP "\(bu" 4
If all else fails, consultants are available to help with
integration for a fee. You can find consultants by asking on the
\&\f(CW\*(C`interchange\-biz@icdevgroup.org\*(C'\fR mailing list.
.SH "SECURITY CONSIDERATIONS"
.IX Header "SECURITY CONSIDERATIONS"
Because this library may call an executable, you should ensure that no
untrusted users have write permission on any of the system directories
or Interchange software directories.
.SH "BUGS"
.IX Header "BUGS"
There is actually nothing *in* Vend::Payment::Signio. It changes packages
to Vend::Payment and places things there.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 4
\&        Cameron Prince <cameronbprince@yahoo.com>
\&        Mark Johnson <mark@endpoint.com>
\&        Mike Heins <mike@perusion.com>
\&        Jon Jensen <jon@icdevgroup.org>
.Ve
