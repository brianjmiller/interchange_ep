.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Vend::Payment::EFSNet 3"
.TH Vend::Payment::EFSNet 3 "2008-11-12" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Vend::Payment::EFSNet \- Interchange EFSNet Support
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    &charge=efsnet
.Ve
.PP
.Vb 1
\&        or
.Ve
.PP
.Vb 1
\&    [charge mode=efsnet param1=value1 param2=value2]
.Ve
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
.Vb 1
\&  Net::SSLeay
.Ve
.PP
.Vb 1
\&    or
.Ve
.PP
.Vb 1
\&  LWP::UserAgent and Crypt::SSLeay
.Ve
.PP
Only one of these need be present and working.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Vend::Payment::EFSNet module implements the \fIefsnet()\fR routine
for use with Interchange. It is compatible on a call level with the other
Interchange payment modules \*(-- in theory (and even usually in practice) you
could switch from CyberCash to EFSNet with a few configuration 
file changes.
.PP
To enable this module, place this directive in \f(CW\*(C`interchange.cfg\*(C'\fR:
.PP
.Vb 1
\&    Require module Vend::Payment::EFSNet
.Ve
.PP
This \fImust\fR be in interchange.cfg or a file included from it.
.PP
Make sure CreditCardAuto is off (default in Interchange demos).
.PP
The mode can be named anything, but the \f(CW\*(C`gateway\*(C'\fR parameter must be set
to \f(CW\*(C`efsnet\*(C'\fR. To make it the default payment gateway for all credit
card transactions in a specific catalog, you can set in \f(CW\*(C`catalog.cfg\*(C'\fR:
.PP
.Vb 1
\&    Variable   MV_PAYMENT_MODE  efsnet
.Ve
.PP
It uses several of the standard settings from Interchange payment. Any time
we speak of a setting, it is obtained either first from the tag/call options,
then from an Interchange order Route named for the mode, then finally a
default global payment variable, For example, the \f(CW\*(C`id\*(C'\fR parameter would
be specified by:
.PP
.Vb 1
\&    [charge mode=efsnet id=YourEFSNetID]
.Ve
.PP
or
.PP
.Vb 1
\&    Route efsnet id YourEFSNetID
.Ve
.PP
or 
.PP
.Vb 1
\&    Variable MV_PAYMENT_ID      YourEFSNetID
.Ve
.PP
The active settings are:
.IP "id" 4
.IX Item "id"
Your EFSNet Store \s-1ID\s0, which you can get from the Merchant Services 
panel after logging in with the username and password supplied to you
by Concord when you signed up.
.Sp
http://www.concordefsnet.com/Developers/MerchantLogin.asp
.Sp
(Check the \*(L"Credentials\*(R" page after login)
.Sp
Global parameter is \s-1MV_PAYMENT_ID\s0.
.IP "secret" 4
.IX Item "secret"
Your EFSNet Store Key, which you can get from the Merchant Services
panel.
Global parameter is \s-1MV_PAYMENT_SECRET\s0. 
.IP "transaction" 4
.IX Item "transaction"
The type of transaction to be run. Valid values are:
.Sp
.Vb 8
\&    Interchange         EFSNet
\&    ----------------    -----------------
\&        auth            CreditCardAuthorize
\&        return          CreditCardRefund
\&        reverse         CreditCardRefund
\&        sale            CreditCardCharge
\&        settle          CreditCardSettle
\&        void            VoidTransaction
.Ve
.IP "remap" 4
.IX Item "remap"
This remaps the form variable names to the ones needed by EFSNet. See
the \f(CW\*(C`Payment Settings\*(C'\fR heading in the Interchange documentation for use.
.Sh "Troubleshooting"
.IX Subsection "Troubleshooting"
Try the instructions above, then switch to the test servers. A test order 
should complete with this test card number: 4111 1111 1111 1111
.PP
Enabling the test servers:
.PP
\&\s-1MV_PAYMENT_HOST\s0 testefsnet.concordebiz.com
.PP
If nothing works:
.IP "\(bu" 4
Make sure you \*(L"Require\*(R"d the module in interchange.cfg:
.Sp
.Vb 1
\&    Require module Vend::Payment::EFSNet
.Ve
.IP "\(bu" 4
Make sure either Net::SSLeay or Crypt::SSLeay and LWP::UserAgent are installed
and working. You can test to see whether your Perl thinks they are:
.Sp
.Vb 1
\&    perl -MNet::SSLeay -e 'print "It works\en"'
.Ve
.Sp
or
.Sp
.Vb 1
\&    perl -MLWP::UserAgent -MCrypt::SSLeay -e 'print "It works\en"'
.Ve
.Sp
If either one prints \*(L"It works.\*(R" and returns to the prompt you should be \s-1OK\s0
(presuming they are in working order otherwise).
.IP "\(bu" 4
Check the error logs, both catalog and global.
.IP "\(bu" 4
Make sure you set your payment parameters properly.  
.IP "\(bu" 4
Try an order, then put this code in a page:
.Sp
.Vb 8
\&    <XMP>
\&    [calc]
\&        my $string = $Tag->uneval( { ref => $Session->{payment_result} });
\&        $string =~ s/{/{\en/;
\&        $string =~ s/,/,\en/g;
\&        return $string;
\&    [/calc]
\&    </XMP>
.Ve
.Sp
That should show what happened.
.IP "\(bu" 4
If all else fails, consultants are available to help with integration for a fee.
See http://www.icdevgroup.org/ for mailing lists and other information.
.SH "NOTES"
.IX Header "NOTES"
CreditCardCredit transactions (where you apply a credit on a card without the
transaction \s-1ID\s0 of a previous charge) are supported by this module, but disabled 
by default in new EFSNet accounts. If you need to use this function, call EFSNet.
.PP
This module supports partial returns, but EFSNet needs to know what the original 
transaction amount was. You can provide this by passing the value in the
original_amount parameter.
.SH "CHANGES"
.IX Header "CHANGES"
Concord EFSNet requires all interface code to be certified by them. If 
you make a change to this module, please contact EFSNet for re\-certification.
More information at: http://www.concordefsnet.com/Developers/Documentation.asp
.SH "BUGS"
.IX Header "BUGS"
There is actually nothing *in* Vend::Payment::EFSNet. It changes packages
to Vend::Payment and places things there.
.SH "AUTHORS"
.IX Header "AUTHORS"
Chris Wenham <cwenham@synesmedia.com>.
Based on code by Mark Stosberg <mark@summersault.com>
and Mike Heins <mike@perusion.com>.
.SH "CREDITS"
.IX Header "CREDITS"
.Vb 5
\&    Jeff Nappi <brage@cyberhighway.net>
\&    Paul Delys <paul@gi.alaska.edu>
\&    webmaster@nameastar.net
\&    Ray Desjardins <ray@dfwmicrotech.com>
\&    Nelson H. Ferrari <nferrari@ccsc.com>
.Ve
